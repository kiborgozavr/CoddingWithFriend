type: edu
files:
  - name: src/hacker/Main.java
    visible: true
    text: |
      package hacker;
      
      public class Main {
          public static void main(String[] args) {
              System.out.println("Hello, world!");
          }
      }
    learner_created: false
  - name: test/HackingTests.java
    visible: false
    text: |-
      import org.hyperskill.hstest.stage.StageTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      import org.hyperskill.hstest.testcase.TestCase;
      
      import java.io.IOException;
      import java.util.List;
      import java.util.Random;
      
      
      public class HackingTests extends StageTest {
      
        boolean ready = false;
        ServerHack serverHack = null;
        Thread serverThread = null;
        String password = null;
      
        String randomPassword() {
          String[] passwords = new String[]{
                  "chance", "frankie", "killer", "forest", "penguin",
                  "jackson", "rangers", "monica", "qweasdzxc", "explorer",
                  "gabriel", "chelsea", "simpsons", "duncan", "valentin",
                  "classic", "titanic", "logitech", "fantasy", "scotland",
                  "pamela", "christin", "birdie", "benjamin", "jonathan",
                  "knight", "morgan", "melissa", "darkness", "cassie"
          };
      
          Random ran = new Random();
          String pass = passwords[ran.nextInt(passwords.length)];
      
          StringBuilder sb = new StringBuilder();
          for (int i = 0; i < pass.length(); i++) {
            char c = pass.charAt(i);
            if (ran.nextInt(2) == 1) {
              c = Character.toUpperCase(c);
            }
            sb.append(c);
          }
          return sb.toString();
        }
      
        void startServer() throws IOException {
          serverHack = new ServerHack(this);
          serverThread = new Thread(serverHack);
          serverThread.start();
      
          while (!ready) {
            try {
              Thread.sleep(100);
            } catch (InterruptedException ignored) {
            }
          }
        }
      
        void stopServer() throws InterruptedException {
          serverHack.disconnect();
          serverThread.join();
        }
      
        @Override
        public List<TestCase<String>> generate() {
          try {
            startServer();
          } catch (IOException ignored) {
          }
          password = randomPassword();
          return List.of(new TestCase<String>()
                  .addArguments("localhost", "9090")
                  .setAttach(password)
                  .setTimeLimit(25000)
          );
        }
      
        public CheckResult check(String reply, Object attach) {
          try {
            stopServer();
          } catch (Exception ignored) {
          }
          if (serverHack == null || !serverHack.connected) {
            return CheckResult.wrong("You didn't connect to the server");
          }
          if (serverHack.message.size() == 0) {
            return CheckResult.wrong("You sent nothing to the server");
          }
          if (reply.length() == 0 || reply.split("\n").length == 0) {
            return CheckResult.wrong("You did not print anything");
          }
          String realPassword = attach.toString();
          String printedPassword = reply.split("\n")[0];
          if (!printedPassword.equals(realPassword)) {
            return CheckResult.wrong("You printed: \"" + printedPassword + "\".\n" +
                    "Correct password: \"" + realPassword + "\"");
          }
          return CheckResult.correct();
        }
      }
    learner_created: false
  - name: test/ServerHack.java
    visible: false
    text: |
      import java.io.DataInputStream;
      import java.io.DataOutputStream;
      import java.io.IOException;
      import java.net.InetAddress;
      import java.net.ServerSocket;
      import java.net.Socket;
      import java.util.ArrayList;
      import java.util.List;
      
      public class ServerHack implements Runnable {
        HackingTests hacking;
      
        boolean stopThread = true;
        boolean connected;
      
        ServerSocket server;
        Socket socket;
        List<String> message = new ArrayList<>();
      
        DataInputStream inputStream;
        DataOutputStream outputStream;
      
        public ServerHack(HackingTests hacking) {
          this.hacking = hacking;
        }
      
        @Override
        public void run() {
          String address = "localhost";
          int port = 9090;
          try {
            server = new ServerSocket(port, 50, InetAddress.getByName(address));
          } catch (IOException ignored) {
          }
          hacking.ready = true;
          try {
            socket = server.accept();
            connected = true;
            socket.setSoTimeout(16000);
      
            inputStream = new DataInputStream(socket.getInputStream());
            outputStream = new DataOutputStream(socket.getOutputStream());
            while (stopThread) {
              String msg = inputStream.readUTF();
              message.add(msg);
              if(message.size()>1_000_000){
                outputStream.writeUTF("Too many attempts");
                break;
              }
              if(msg.equals(hacking.password)){
                outputStream.writeUTF("Connection success!");
                break;
              }else{
                outputStream.writeUTF("Wrong password!");
              }
            }
            disconnect();
          } catch (IOException ignored) {
          }
        }
      
        public void disconnect() {
          stopThread = false;
          try {
            inputStream.close();
            socket.close();
            server.close();
          } catch (IOException ignored) {
          }
        }
      }
    learner_created: false
feedback_link: https://hyperskill.org/learn/step/26981#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Mon, 22 Apr 2024 11:00:09 UTC"
record: 3
